{
  "boards": [
    {
      "board": {
        "id": "e119c091-e1fa-4596-9bc7-038ceab6adec",
        "name": "Kanban",
        "description": null,
        "branch_prefix": null,
        "next_card_number": 2,
        "created_at": "2025-10-10T08:47:44.779097Z",
        "updated_at": "2025-10-10T23:22:23.206652Z"
      },
      "columns": [
        {
          "id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "board_id": "e119c091-e1fa-4596-9bc7-038ceab6adec",
          "name": "Todo",
          "position": 0,
          "wip_limit": null,
          "created_at": "2025-10-10T08:47:57.834219Z",
          "updated_at": "2025-10-10T08:47:57.834219Z"
        }
      ],
      "cards": [
        {
          "id": "143615fe-fbcd-4d80-a88d-8173ec4b9573",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Unify import and export",
          "description": "The application is exporting boards using two different formats.\n\n```JSON\n{ board: { ... } }\n```\n\nand\n\n```JSON\n{ boards: [{ ... }] }\n```\n\nLet us make import and export only expect the latter.\n",
          "priority": "Medium",
          "status": "Done",
          "position": 0,
          "due_date": null,
          "points": 1,
          "card_number": null,
          "created_at": "2025-10-10T08:47:57.834239Z",
          "updated_at": "2025-10-10T08:50:57.752600Z"
        },
        {
          "id": "959a092f-61de-41de-ac4a-729d6e1fcadf",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Rename tasks of exports to cards",
          "description": "To better align with the kanban domain let us change the export field `tasks` into `cards`\n",
          "priority": "Medium",
          "status": "Done",
          "position": 1,
          "due_date": null,
          "points": 1,
          "card_number": null,
          "created_at": "2025-10-10T09:08:28.861766Z",
          "updated_at": "2025-10-10T09:09:13.709970Z"
        },
        {
          "id": "292e3f49-089b-40fb-8ea7-c693603904b2",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Add git branches to card meta data",
          "description": "We want to be able to create git branches and tie them to specific tasks so that we can trace the history.\n\nBe able to specify a prefix for use in the project\n\n- Set prefix in Board settings\n- Assign prefix + autoincremented number to card\n- From a card. Copy branch name\n- From a card. Copy `git checkout -b prefix+id`\n\nShould the id be autoincrement or uuid?\n\nReadability says it should be autoincremented. So we go with that for now.\n\n- If no prefix fallback to a default.\n- Customize default. Requires application configuration file feature?\n\n╭────────────────────────────────────────────────────────────────╮\n│ Git Branch Integration Implementation Plan                     │\n│                                                                │\n│ Core Design Decisions                                          │\n│                                                                │\n│ - Branch ID: Auto-incremented u32 per board (decided:          │\n│ readability over UUIDs)                                        │\n│ - Prefix Hierarchy: Board prefix → App config default → \"task\" │\n│  fallback                                                      │\n│ - ID Assignment: Lazy (on first request) to avoid assigning    │\n│ IDs to cards that never need branches                          │\n│ - Branch Format: {prefix}-{id} (e.g., feature-42, task-17)     │\n│                                                                │\n│ ---                                                            │\n│ 1. Domain Layer (kanban-domain)                                │\n│                                                                │\n│ Board model (board.rs):                                        │\n│ - Add branch_prefix: Option<String> field                      │\n│ - Add next_card_id: u32 field (default: 1)                   │\n│ - Add update_branch_prefix(&mut self, prefix: Option<String>)  │\n│ method                                                         │\n│ - Add allocate_card_id(&mut self) -> u32 method              │\n│                                                                │\n│ Card model (card.rs):                                          │\n│ - Add card_id: Option<u32> field                             │\n│ - Add ensure_card_id(&mut self, board: &mut Board) method    │\n│ - Add branch_name(&self, board: &Board, default_prefix: &str)  │\n│ -> Option<String> method                                       │\n│ - Add git_checkout_command(&self, board: &Board,               │\n│ default_prefix: &str) -> Option<String> method                 │\n│ - Add prefix validation (no spaces, git-safe characters)       │\n│                                                                │\n│ ---                                                            │\n│ 2. Application Configuration (kanban-core)                     │\n│                                                                │\n│ Create new config.rs module:                                   │\n│ - Define AppConfig struct with default_branch_prefix:          │\n│ Option<String>                                                 │\n│ - Use config crate or simple TOML parsing                      │\n│ - Config file location: ~/.config/kanban/config.toml           │\n│ - Load config on app startup in kanban-cli                     │\n│ - Thread through to TUI via App struct                         │\n│                                                                │\n│ ---                                                            │\n│ 3. Clipboard Integration (kanban-tui)                          │\n│                                                                │\n│ Add dependencies to kanban-tui/Cargo.toml:                     │\n│ - arboard = \"3.4\" (cross-platform clipboard)                   │\n│                                                                │\n│ Create new clipboard.rs module:                                │\n│ - copy_to_clipboard(text: &str) -> io::Result<()>              │\n│ - Handle errors gracefully (e.g., headless environments)       │\n│                                                                │\n│ ---                                                            │\n│ 4. TUI Layer (kanban-tui)                                      │\n│                                                                │\n│ App struct (app.rs):                                           │\n│ - Add app_config: AppConfig field                              │\n│ - Add clipboard operations to card detail mode                 │\n│                                                                │\n│ Board settings (new mode AppMode::BoardSettings):              │\n│ - Add focus state for navigating board settings                │\n│ - Edit branch prefix with external editor or inline input      │\n│ - Show current prefix, effective prefix (with fallback chain)  │\n│                                                                │\n│ Card detail view (ui.rs):                                      │\n│ - Show branch ID (if assigned)                                 │\n│ - Show computed branch name                                    │\n│ - Show git checkout command                                    │\n│                                                                │\n│ Key bindings (in CardDetail mode):                             │\n│ - b - Assign branch ID (if not already assigned)               │\n│ - y - Copy branch name to clipboard                            │\n│ - Y - Copy git checkout -b {branch} to clipboard               │\n│ - Add to help text                                             │\n│                                                                │\n│ New AppMode variants:                                          │\n│ - BoardSettings - for editing board-level settings             │\n│ - SetBranchPrefix - dialog for setting prefix                  │\n│                                                                │\n│ ---                                                            │\n│ 5. Persistence                                                 │\n│                                                                │\n│ Update serialization/deserialization:                          │\n│ - Board export/import already uses serde                       │\n│ - New fields automatically included                            │\n│ - Migration: existing boards get branch_prefix: None,          │\n│ next_card_id: 1                                              │\n│ - Existing cards get card_id: None                           │\n│                                                                │\n│ ---                                                            │\n│ 6. Testing Strategy                                            │\n│                                                                │\n│ Unit tests:                                                    │\n│ - Branch ID allocation (sequential, no gaps)                   │\n│ - Branch name generation with different prefix scenarios       │\n│ - Prefix validation (reject invalid git characters)            │\n│ - Clipboard operations (mock if needed)                        │\n│                                                                │\n│ Integration tests:                                             │\n│ - Round-trip serialization with new fields                     │\n│ - Multiple cards getting sequential IDs                        │\n│                                                                │\n│ ---                                                            │\n│ 7. Implementation Order                                        │\n│                                                                │\n│ 1. Add AppConfig in kanban-core                                │\n│ 2. Update Board domain model with prefix + next_card_id      │\n│ 3. Update Card domain model with card_id + methods           │\n│ 4. Add clipboard module to kanban-tui                          │\n│ 5. Update App struct to hold config                            │\n│ 6. Add board settings mode in TUI                              │\n│ 7. Add card detail branch operations                           │\n│ 8. Update help text and key bindings                           │\n│ 9. Add tests                                                   │\n│ 10. Update CLAUDE.md with new features                         │\n│                                                                │\n│ ---                                                            │\n│ 8. Edge Cases & Validation                                     │\n│                                                                │\n│ - Validate prefix: alphanumeric + hyphens only, no             │\n│ leading/trailing hyphens                                       │\n│ - Max branch name length: git supports ~255 chars, warn if     │\n│ prefix + ID exceeds reasonable length                          │\n│ - Clipboard unavailable: show friendly error, fallback to      │\n│ displaying text                                                │\n│ - Board without prefix: use app config default or \"task\"       │\n│ - Cards created before feature: assign IDs on demand           │\n│                                                                │\n│ ---                                                            │\n│ Example Usage Flow                                             │\n│                                                                │\n│ 1. User opens board settings (s in projects view)              │\n│ 2. Sets prefix to \"feat\"                                       │\n│ 3. Navigates to card, presses b to assign branch ID → card     │\n│ gets card_id=1                                               │\n│ 4. Board's next_card_id increments to 2                      │\n│ 5. User presses y → copies \"feat-1\" to clipboard               │\n│ 6. User presses Y → copies \"git checkout -b feat-1\" to         │\n│ clipboard                                                      │\n│ 7. Next card gets card_id=2, branch name \"feat-2\"            │\n│                                                                │\n│ ---                                                            │\n│ Dependencies to add:                                           │\n│ - arboard = \"3.4\" (clipboard)                                  │\n│ - config = \"0.14\" (optional, for TOML config parsing)          │\n│ - OR use simple std::fs::read_to_string + toml = \"0.8\" for     │\n│ lightweight config     \n",
          "priority": "Medium",
          "status": "Todo",
          "position": 2,
          "due_date": null,
          "points": 5,
          "card_number": 1,
          "created_at": "2025-10-10T21:58:56.145240Z",
          "updated_at": "2025-10-10T23:28:13.578619Z"
        },
        {
          "id": "f1a80abd-338c-4593-92d6-20c2db7dc093",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Links to cards",
          "description": "Be able to have references to other cards.\n\n[like this](DEV-0001) Should be able to follow that link and open the card in Task Description interface.\n\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 3,
          "due_date": null,
          "points": 4,
          "card_number": null,
          "created_at": "2025-10-10T22:03:42.988557Z",
          "updated_at": "2025-10-10T22:36:48.510179Z"
        },
        {
          "id": "e96684a5-4645-443e-8e2c-6bb646e248c6",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Card dependencies",
          "description": "Introduce two features\n\n# Block\n\n- Add blocked by card\n- Add create blocker. Creating the new card that would be the blocker.\n\n# Grouping of cards under one card\n\nI would like to keep things flat but I would like card meta data where I can group cards by a top level card.\n\nThe interface would present the grouping as nested to begin with and we see how it behaves?\n\nExample\n\n```\nImplement Card Grouping ...\n```\n\nWhich would when hit enter or space on expand into\n\n```\nImplement Card Grouping\n  Create ui\n  Add metadata\n```\n\n# Duplicate cards\n\nWhen two cards propose changes that are two sides of the same coin. Be able to add them as siblings. \n\nBut when two cards propose changes that are the same side of the same coin, we want to merge them together. Creating a new card by editing the description and title in a git conflict type way\n\nThe merging will ofcourse be handled by opening EDITOR and injecting the content into their respective section.\n\nExample\n---\n\nTitle\n\n```\n<<<<<<< KAN-0001\nCard Background\n=======\nCard Background Color\n>>>>>>> KAN-0002\n```\n\nDescription\n\n```\nWe want to introduce a new feature that\n<<<<<<< KAN-0001\nMakes card background purple\n=======\nMakes card background green\n>>>>>>> KAN-0002\n```\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 4,
          "due_date": null,
          "points": 4,
          "card_number": null,
          "created_at": "2025-10-10T22:05:04.607714Z",
          "updated_at": "2025-10-10T22:44:01.235679Z"
        },
        {
          "id": "90f8121a-045f-47fd-b8fe-bb0e5b7662b1",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Add column definitions",
          "description": "At the project level. Be able to define columns\n\nMinimum and default.\n\n- TODO\n- Complete\n\nBe able to change the name of columns\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 5,
          "due_date": null,
          "points": 2,
          "card_number": null,
          "created_at": "2025-10-10T22:11:25.809290Z",
          "updated_at": "2025-10-10T22:12:36.415713Z"
        },
        {
          "id": "86c1b649-03bc-4da8-87c3-e20a2c56a640",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Test the application with another editor",
          "description": "Need to try the application to see how it behaves with different editors\n\n- VSCode\n- vim\n- vi\n- emacs\n\nWindows\n\n- notepad\n- notepad++\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 6,
          "due_date": null,
          "points": 1,
          "card_number": null,
          "created_at": "2025-10-10T22:13:04.048521Z",
          "updated_at": "2025-10-10T22:14:15.622866Z"
        },
        {
          "id": "eceed2ce-de5e-4166-95e7-7fb9c7e65b20",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Change priority",
          "description": "- Be able to change the priority of a task\n\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 7,
          "due_date": null,
          "points": 1,
          "card_number": null,
          "created_at": "2025-10-10T22:14:31.293267Z",
          "updated_at": "2025-10-10T22:36:31.344615Z"
        },
        {
          "id": "7cd165b0-6671-46d6-b837-4e73ada26333",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Add or update priorities",
          "description": "On the board level. \n\nBe able to configure priorities and change their names. \n\nWe should start with only medium?\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 8,
          "due_date": null,
          "points": 1,
          "card_number": null,
          "created_at": "2025-10-10T22:15:09.199792Z",
          "updated_at": "2025-10-10T22:16:05.956954Z"
        },
        {
          "id": "454144d2-27ac-4abf-8632-407908fa8f80",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Be able to scroll in the card description",
          "description": "Should be pretty self explantory. For cards with a loger description.\n\nWe want to be able to scroll so see more.\n\nPriority low as we can open `$EDITOR`\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 9,
          "due_date": null,
          "points": 1,
          "card_number": null,
          "created_at": "2025-10-10T22:53:19.579898Z",
          "updated_at": "2025-10-10T22:54:22.387591Z"
        },
        {
          "id": "d48f9085-57ff-42c5-9f42-3cbb3cafde93",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Publish on nixpkgs",
          "description": "# Steps to Add Your Project to Nixpkgs\n\n## 1. Add Yourself as a Maintainer\n\nFirst, you'll need to add yourself to the maintainer list in maintainers/maintainer-list.nix with a separate commit titled \"maintainers: add <your-handle>\".\n\n## 2. Create the Package Expression\n\nSince your Kanban is a Rust project, you'll use buildRustPackage from rustPlatform nixpkgs/doc/languages-frameworks/rust.section.md at master · NixOS/nixpkgs\n\n[default.nix](./default.nix) \n\n## 3. Determine Package Location\n\nDecide which pkgs/ subfolder your expression should live in, then add your expression under a directory like pkgs/applications/misc/kanban/default.nix or similar\n\n## 4. Add to Package Index\n\nAdd an entry in pkgs/top-level/all-packages.nix so nixpkgs can find your package \n\n## 5. Fork and Test\n\nFork the nixpkgs repository, make your changes in a local branch, then build from the root of nixpkgs with nix-build -A kanban Nixpkgs/Contributing - NixOS Wiki\n\n## 6. Handle the Hash Values\n\nFor the cargoHash, you can initially use an empty string or fake hash, and Nix will tell you the correct hash when you try to build nixpkgs/doc/languages-frameworks/rust.section.md at master · NixOS/nixpkgs\n\n## 7. Submit a Pull Request\n\nOnce your package builds successfully, format your code with a Nix formatter like alejandra, then open a PR on GitHub with the title format \"kanban: init at <version>\" \n\n## 8. Wait for Review\n\nBe patient - it's normal for PRs to sit for weeks. If you need help, you can reach out on NixOS Discourse or the Matrix channels\n\n## Important Considerations\n\nRead the commit conventions specific to pkgs and include relevant information in your commit messages so others can understand why changes were made \n\nThe maintainers field is for you as the Nix expression maintainer, not the project maintainer. By submitting this package, you're taking responsibility for ongoing maintenance like version bumps \n\n\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 10,
          "due_date": null,
          "points": 5,
          "card_number": null,
          "created_at": "2025-10-10T22:56:04.200355Z",
          "updated_at": "2025-10-10T23:01:01.402918Z"
        },
        {
          "id": "6a0cbe1e-a05e-4aca-bd53-f0057215d671",
          "column_id": "591afb61-7289-46bf-ba07-21758afd44fe",
          "title": "Add order tasks lists by",
          "description": "Order tasks by\n\n- Points\n- Priority\n- Date created\n- Date due\n- Status\n\n",
          "priority": "Medium",
          "status": "Todo",
          "position": 11,
          "due_date": null,
          "points": null,
          "card_number": null,
          "created_at": "2025-10-10T23:01:18.553586Z",
          "updated_at": "2025-10-10T23:02:13.766679Z"
        }
      ]
    }
  ]
}